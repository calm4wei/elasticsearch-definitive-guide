[[search-lite]]
=== Search _Lite_

有两种搜索API的形式：一种精简查询-字符串版本在查询字符串中传递所有的参数，另一种功能全面的_request body_版本使用JSON格式并且使用一种名叫查询DSL的丰富搜索语言。

在命令行中查询-字符串搜索对运行特殊的查询是有益的。例如，查询在 `tweet` 类型中 `tweet` 字段包含 `elasticsearch` 单词的所有文档：

[source,js]
--------------------------------------------------
GET /_all/tweet/_search?q=tweet:elasticsearch
--------------------------------------------------
// SENSE: 050_Search/20_Query_string.json

下一个查询在 `name` 字段中包含 `john` 并且在 `tweet` 字段中包含 `mary` 的文档。实际的查询就是这样

    +name:john +tweet:mary

但是查询-字符串参数所需要的百分比编码让它比实际上的更含义模糊：

[source,js]
--------------------------------------------------
GET /_search?q=%2Bname%3Ajohn+%2Btweet%3Amary
--------------------------------------------------
// SENSE: 050_Search/20_Query_string.json


`+` 前缀表示必须与查询条件匹配。类似地， `-` 前缀表示一定不与查询条件匹配。没有 `+` 或者 `-` 的所有条件是可选的--匹配的越多，文档就越相关。

[[all-field-intro]]
==== The _all Field

这个简单搜索返回包含 `mary` 的所有文档：

[source,js]
--------------------------------------------------
GET /_search?q=mary
--------------------------------------------------
// SENSE: 050_Search/20_All_field.json


之前的例子中，我们在 `tweet` 和 `name` 字段中搜索内容。然而，这个查询的结果在三个地方提到了 `mary` ：

* A user whose name is Mary
* Six tweets by Mary
* One tweet directed at @mary

Elasticsearch 是如何在三个不同的区域中查找到结果的呢？

当你索引一个文档的时候，Elasticsearch 取出所有字段的值拼接成一个大的字符串，作为 `_all` 字段进行索引。例如，当我们索引这个文档时：

[source,js]
--------------------------------------------------
{
    "tweet":    "However did I manage before Elasticsearch?",
    "date":     "2014-09-14",
    "name":     "Mary Jones",
    "user_id":  1
}
--------------------------------------------------


这就好似增加了一个名叫 `_all` 的额外字段：

[source,js]
--------------------------------------------------
"However did I manage before Elasticsearch? 2014-09-14 Mary Jones 1"
--------------------------------------------------


除非字段已经被指定，否则就使用 `_all` 字段进行搜索。

TIP: 在你刚开始使用 Elasticsearch 的时候， `_all` 字段是一个很实用的特征。之后，你会发现如果你在搜索的时候用指定字段来代替 `_all` 字段，对搜索出来的结果将有更好的控制。当 `_all` 字段对你不再有用的时候，你可以将它置为失效，向在 <<all_field>> 中解释的。

[[query-string-query]]
[role="pagebreak-before"]
==== 更复杂的查询

下面对tweents的查询，使用以下的条件：

* `name` 字段中包含 `mary` 或者 `john`
* `date` 值大于 `2014-09-10`
* +_all_+ 字段包含 `aggregations` 或者 `geo`

[source,js]
--------------------------------------------------
+name:(mary john) +date:>2014-09-10 +(aggregations geo)
--------------------------------------------------
// SENSE: 050_Search/20_All_field.json

适当编码过的查询字符串看起来有点晦涩难读：

[source,js]
--------------------------------------------------
?q=%2Bname%3A(mary+john)+%2Bdate%3A%3E2014-09-10+%2B(aggregations+geo)
--------------------------------------------------

从之前的例子中可以看出，这种简化的查询-字符串的效果是非常惊人的。在相关参考文档中做出了详细解释的查询语法，让我们可以简洁的表达很复杂的查询。这对于命令行随机查询和在开发阶段都是很好的。

然而，这种简洁的方式可能让排错变得模糊和困难。像 `-` ， `:` ， `/` 或者 `"` 不匹配这种易错的小语法问题将返回一个错误。

字符串查询允许任何用户在索引的任意字段上运行既慢又重的查询，这些查询可能会暴露隐私信息或者将你的集群拖垮。

[TIP]
==================================================
因为这些原因，我们不推荐直接向用户暴露查询-字符串，除非这些用户对于集群和数据是可以被信任的。

==================================================

相反，我们经常在产品中更多的使用功能全面的 _request body_ 查询API。然而，在我们达到那种程度之前，我们首先需要了解数据在 Elasticsearch 中是如何索引的。 

